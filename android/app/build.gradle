apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    testOptions {
        unitTests.returnDefaultValues = true
    }
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "me.gentielezaj.wagwoord"
        minSdkVersion 29
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildFeatures {
        dataBinding true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    packagingOptions {
        exclude 'META-INF/jersey-module-version'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude("META-INF/*.kotlin_module")
    }
}
repositories {
    maven { url "https://www.jitpack.io" }
}
dependencies {
    implementation 'androidx.wear:wear:1.1.0'
    compileOnly 'com.google.android.wearable:wearable:2.8.1'
    def fragment_version = "1.2.5"
    def lifecycle_livedata_version = "2.2.0"
    def activity_ktx_version = "1.1.0"
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.4.10"
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation "androidx.fragment:fragment-ktx:$fragment_version"
    implementation "androidx.activity:activity-ktx:$activity_ktx_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_livedata_version"
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.navigation:navigation-fragment:2.3.1'
    implementation 'androidx.navigation:navigation-ui:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.1'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.1'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'commons-codec:commons-codec:1.13'
    implementation 'org.reflections:reflections:0.9.12'
    implementation project(":sqldroid")
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.7"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.3"
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.4.10"
    implementation 'dev.turingcomplete:kotlin-onetimepassword:2.0.0'
    implementation 'com.github.wada811:DataBinding-ktx:5.0.0'

    implementation 'com.android.volley:volley:1.1.1'
    implementation 'com.google.code.gson:gson:2.8.5'

    implementation 'androidx.preference:preference:1.1.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'
    debugImplementation 'com.amitshekhar.android:debug-db:1.0.6'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation 'br.com.simplepass:loading-button-android:2.2.0'

    implementation group: 'com.sun.jersey', name: 'jersey-client', version: '1.19.4'
    implementation group: 'org.bouncycastle', name: 'bcprov-jdk16', version: '1.46'

    implementation "com.google.guava:guava:29.0-android"
}

kapt {
    generateStubs = true
}

task print {
    println(project.configurations.compile)
}

afterEvaluate {
    android.applicationVariants.each { variant ->
        variant.javaCompiler.doLast {
            println("---------------task started")
            println(project.configurations.compile*.toURI())
            project.configurations.compile*.compileClasspath.each { println it }
            // get JAR file that contains the classes
            def collection = project.configurations.compile*.toURI().find { URI uri -> println(new File(uri).name) }
            URL[] urls = collection.collect {
                println "Collecting classes using Reflections from " + it
                it.toURL()
            }

            // collect all classes
            ClassLoader classLoader = new URLClassLoader(urls, ClassLoader.systemClassLoader)
            org.reflections.Configuration config = org.reflections.util.ConfigurationBuilder
                    .build("me.gentielezaj.wagwoord")
                    .addClassLoader(classLoader)
                    .setUrls(urls)
            org.reflections.Reflections reflections = new org.reflections.Reflections("me.gentielezaj.wagwoord")

            // save as JSON file into the assets folder
            // (a) generate file for current debug or release build
            reflections.save(
                    "${variant.javaCompiler.destinationDir}/../../assets/${variant.buildType.name}/reflections/my-reflections.json",
                    new org.reflections.serializers.JsonSerializer())
            // (b) always update fall-back file for debug (used when running app from Android Studio or IntelliJ)
            reflections.save(
                    "${variant.javaCompiler.destinationDir}/../../../../src/debug/assets/reflections/my-reflections.json",
                    new org.reflections.serializers.JsonSerializer())
        }
    }
}
